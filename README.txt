 git

Состояние файлов
- отслеживаемые, под версионным контролем
- неотслеживаемые, их изменения никто не контролирует

Отслеживаемы бывают - это файлы, которые были в последнем слепке состояния проекта (snapshot). Они бывают:
- неизмененными
- изменеными
- подготовленные к коммиту

----------------------------------------------------------------------------
git config --list - настройки гита
git config --global --list - глобальные настройки

смена имени и почты владельца репозитория
git config --global user.name 'в кавычках вписать новое имя'
git config --global user.email 'вписать новую электроную почту'

cd - команда для перехода в другую папку/директорию
mkdir '' - создать папку, в кавычках указывается имя папки 
git status - вывести информацию о репозитарии, в котором ведется работа - в каком состоянии находятся файлы
----------------------------------------------------------------------------
Создание репозитария на локальном диске
git init - создание репозитария в текущей папке

----------------------------------------------------------------------------
git clone [url] - команда для клонирования репозитария с удаленного сервера. При этом команда создает папку на локальном диске с именем как у удаленного репозитария, иницилизирует каталог .git, скачивает все файлыс удаленного репозитория, созадет рабочую копию последней версии
git clone [url] newName - тоже самое, только создается локальный репозиторий с овым именем newName


рядом с путем репозитория появилась надпись в скобках - (master) - мы находимся в мастер ветке
----------------------------------------------------------------------------
.gitignore - файл, куда записываются файлы и папки, которые не нужно включать в репозитарий
cat .gitignore - команда отображает настройки игнорирования файлов и папок в репозитории
*.[ao] - игнорировать файлы с расширением .a и .o
*~ - игнорировать файлы, которые заканчиваются на символ '~'
!test.a - игнорировать все файлы, которые заканчиваются на .а, кроме файла test.a
/test - игнорировать папку, который находится только в корневом каталоге
test/ -игнорировать все файлы в каталоге test
doc/test.txt - игнорировать test.txt в каталоге doc, но doc/dos/test.txt
doc/**/.txt - игнорировать все с расширением .txt в каталоге doc и подкаталогах

----------------------------------------------------------------------------
git add . начать отслеживать все имеющиеся файлы и папки в репозитории, знак"точка" - включить все файлы и папки
git add *.txt - начать отслеживать в репозитарии файлы с разрешением "txt"
git add txt.txt -начать отслеживать в репозитарии файл с именем txt.txt
----------------------------------------------------------------------------
git commit -m '' - добавления коммита, в кавычках указывается комминтарий к коммиту
git commit -a -m '' - в этой команде совмещены две команды 'add' И 'commit' -только для отслеживаемых файлов
----------------------------------------------------------------------------
git log - позволяет вывести на экран последовательность коммитов репозитария
git log --graph - отображате все коммиты ввиде графа
git log -2 - вывести на экран два последних сделанных коммита
для выхода из лога необходимо нажать клавишу 'q'

git log +:
-p	Для каждого коммита показывать дельту внесённых им изменений.
--word-diff	Показывать изменения на уровне слов.
--stat	Для каждого коммита дополнительно выводить статистику по изменённым файлам.
--shortstat	Показывать только строку changed/insertions/deletions от вывода с опцией --stat.
--name-only	Показывать список изменённых файлов после информации о коммите.
--name-status	Выводить список изменённых файлов вместе с информацией о добавлении/изменении/удалении.
--abbrev-commit	Выводить только первые несколько символов контрольной суммы SHA-1 вместо всех 40.
--relative-date	Выводить дату в относительном формате (например, "2 weeks ago") вместо полной даты.
--graph	Показывать ASCII-граф истории ветвлений и слияний рядом с выводом лога.
--pretty	Отображать коммиты в альтернативном формате. Возможные параметры: oneline, short, full, fuller и format (где вы можете указать свой собственный формат).

----------------------------------------------------------------------------
git reset HEAD file.name - сделать файл file.name неотслеживаемым, 
также эта команда позволяет восстановить файл, если он был удален после коммита через команду git rm file.name
git reset HEAD - сделать все файлы неотслевиемыми
----------------------------------------------------------------------------
git branch - позволяет вывести на экран все существующие ветки в репозитории
git branch nameNewBranch - создание новой ветки с именем nameNewBranch
git branch -a - позволяет посмотреть локальные и удаленные ветки
git branch -d nameNewBranch - производит удаление локальной ветки nameNewBranch, прежде чем ее получится удалить, нужно перейти на другую ветку
----------------------------------------------------------------------------
Перед слиянием веток необходмио перейти на ту ветку, в которую будет производиться слияние, предвартельно нужно все за коммитить
git merge nameNewBranch -производит слияния master ветки и ветки с именем nameNewBranch

----------------------------------------------------------------------------
git checkout nameNewBranch - перейти на новую ветку nameNewBranch
git checkout -b branch3 - команда совмещает в себе создание новой ветки brach3 и переход в эту ветку
git checkout xxxxxxx - позволяет откатиться к коммиту, у которого первый семь символов вхэш коде xxxxxxx
git checkout master - позволяет откатиться к последнему коммиту, позволяет также переключиться к вестке master с другой ветки
git checkout -- file.name - данная команда позволяет вернуть удаленный файл после коммита обратно в коммит,
или изменить файл после его редкатирования со статусом modifed
----------------------------------------------------------------------------
rm file.name - удаление unstaged файла file.name без возможности его восстановления
git rm file.name - удаление staged файла с возможностью его восстановления, данное действие возможно выполнить, только если файл уже закоммичен
git mv file.name FILE.name -  позволяет менять имя файла file.name на другое FILE.name
----------------------------------------------------------------------------
git diff - команда позволяет посмотреть -  какике произошли изменения в неиндексированных файлах,
также эта команда позволяет посмотреть изменения между индексированными и не индексированым файлом(файлами)
git diff --cached - команда позволяет посмотреть - какие различия между индексированными файлами и последним коммитом
----------------------------------------------------------------------------
git remote add origin <url_remote_repository> - привязаться к удаленному репозиторию по ссылке url_remote_repository и приствоить ему алиас origin(здесь может быть другое имя)
git remote - список удаленных серверов, куда подключен локальный репозитарий
git remote -v - url адресс, поключенных удаленных серверов
git remote rm origin - удалить привязку к удаленному серверу по его алиасу origin
----------------------------------------------------------------------------
git fetch - загрузить весь репозиторий на локальный диск, но не производить слияние с локальным.
----------------------------------------------------------------------------
git push - отправляет на сервер в ветку, которая стоит по умолчанию(текущая) 
git push origin newBranch - создать удаленную ветку newBranch и отправить содержимое локального репозитария на сервер в новую ветку; если ветка создана, но не стоит по умочанию - то отправлять с локального репозитария на удаленный только так
git push --set-upstream origin newBranch - сделать ветку newBranch - веткой по умолчанию, теперь для отправки даных на
удаленныей репозитарий можно пользоваться просто командой push




